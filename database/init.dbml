// This file contains the original definition of the database

// Copy and paste this file to https://dbdiagram.io/d to visualize
// and export a new init.sql file

// Docs: https://dbml.dbdiagram.io/docs

Table users {
  id integer [pk, increment, not null]
  username varchar [not null]
  email varchar [not null]
  password varchar [not null]
  created_at timestamp [default: `now()`, not null]
}

Table calendars {
  id integer [pk, increment, not null]
  name varchar [not null]
  description text
  owner_user_id integer [default: null] // NULL if it's a group calendar
  is_group boolean [default: false, not null]
  created_at timestamp [default: `now()`, not null]
}
Ref: calendars.owner_user_id > users.id [delete: cascade]

Table calendar_membership {
  id integer [pk, increment, not null]
  calendar_id int [not null]
  user_id int [not null]
  role enum('owner', 'member') [not null]
}
Ref: calendar_membership.calendar_id > calendars.id [delete: cascade]
Ref: calendar_membership.user_id > users.id [delete: cascade]

Table events {
  id integer [pk, increment, not null]
  ics_uid varchar [unique, not null] // Unique ID from the .ics file (UID field)
  title varchar [not null] // iCalendar SUMMARY
  description text // iCalendar DESCRIPTION
  location varchar // iCalendar LOCATION
  start_time timestamp [not null] // iCalendar DTSTART
  end_time timestamp [not null] // iCalendar DTEND
  timezone varchar [default: 'UTC', not null] // iCalendar TZID
  all_day boolean [default: false, not null] // iCalendar VALUE=DATE (all-day events)
  recurrence_rule text // iCalendar RRULE (for repeating events)
  status enum('confirmed', 'tentative', 'cancelled') [default: 'confirmed', not null] // iCalendar STATUS
  created_at timestamp [default: `now()`, not null] // iCalendar CREATED
  updated_at timestamp [default: `now()`, not null] // iCalendar LAST-MODIFIED
  proposed_by_user_id int [not null] // User who created/imported the event
}
Ref: events.proposed_by_user_id > users.id [delete: cascade]

Ref events_calendars: events.id <> calendars.id // many-to-many

Table event_attendance {
  id integer [pk, increment, not null]
  event_id int [not null]
  user_id int [not null]
  status enum('accepted', 'declined', 'tentative', 'needs-action') [default: 'needs-action', not null] // iCalendar PARTSTAT
}
Ref: event_attendance.event_id > events.id [delete: cascade]
Ref: event_attendance.user_id > users.id [delete: cascade]

// Table external_calendars {
//   id integer [pk, increment, not null]
//   user_id int [not null]
//   source_name varchar [not null] // e.g., "Google Calendar"
//   source_url varchar [not null] // iCalendar SOURCE URL
//   last_sync timestamp [default: `now()`, not null] // Last sync time
//   sync_status enum('active', 'failed') [default: 'active', not null] // Sync state
// }
// Ref: external_calendars.user_id > users.id [delete: cascade]